.TH ySTR 7 2015-jun "linux" "heatherly custom tools manual"

.SH NAME
ySTR \- decision rationale, objectives, and overview

.SH SUMMARY
ySTR is a light, clean, highly debuggable library for string handling and
manipulation to make repeditive, tedious, haphazard, and neglected tasks
systematic, shared, testable, maintainable, and reliable.

.SH SCOPE, REASONING and DECISION

.B definition (D).  
c-style strings are contiguous bytes that are each interpreted as an ascii
character until a null byte is reached (representing the end).  they are fast
and light, but subject to risks.

.B what the hell (?).  
i am tackling the problem for two reasons.  one, to learn about maintaining
fundamental libraries.  two, because i reuse some string manipulations which
i would like to maintain once.

.B situation (S).  
i have a small host of valuable string handling, formatting, and manipulation
routines to increase string safety, trim whitespace, handle delimiters,
and make special text version of numbers.

.B complication (C).  
these routines exist in several key programs and so are maintained separately,
tested in duplicate, and subject to troubles.  they also cloud focus by
showing up in the program source code.

.B my solution (M).  
ySTR library will by my supplement to the standard ansi-c string library.  i
will consolidate my best functions to make them readily available to any
program that needs them.

.B target user (T).  
very technical, well-versed, power user.

.B accepted functionality (a).  
   -- length limited strcpy, strcat, strlen, and replacement
   -- trimming from various parts of the string
   -- cleaning to remove special and dangerous chars
   -- formatting of numbers into strings in many formats
   -- unformatting string representations of numbers back into values
   -- delimiter counting, finding, replacing, and removal

.B rejected functionality (r).  
   -- case-by-case

.B as always, all my applications must (#).  
   -- run on any linux box from raspberry to cray
   -- stay focused, small, tight, reliable, and secure
   -- forgo sloppy, kitchen-sink languages, like python, java, or perl
   -- stay away from dependency on external code libraries, like boost
   -- only human-readable, 7-bit safe, ascii streams (not database)
   -- have dedicated, maintained, automated unit testing
   -- provide either detailed reporting or logging for debugging
   -- use secure communications between systems where required
   -- clean, clean code so i can maintain after long absences
   -- no international, multi-lang, multi-byte support (freaking ever)
   -- one-hundred percent keyboard driven and centric
   -- operate using modes and windows/panels like vi/vim
   -- follow the yVIKEYS standard to the letter
   -- all tables must be self describing with labels and queries
   -- all data structures must include dumps, reports, and audits

.SH SEE ALSO
this documentation is layered to provide easier navigation.
   ySTR  (3), library overview and calling
   ySTR  (7), decision rationale, objectives, and overview

.SH AUTHOR
heatherly <jelloshrke at gmail dot com>

.SH COLOPHON
this page is part of a documentation package mean to make the use of the
heatherly tools easier and faster

