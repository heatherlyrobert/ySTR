.TH ySTR 7 2015-jun "linux" "heatherly custom tools manual"

.SH NAME
ySTR \- decision rationale, objectives, and overview

.SH SUMMARY
ySTR is a light, clean, highly debuggable library for string handling and
manipulation to make repeditive, tedious, haphazard, and neglected tasks
systematic, shared, testable, maintainable, and reliable.

.SH SCOPE, REASONING and DECISION

.B definition (D).  
c-style strings are contiguous bytes that are each interpreted as an ascii
character until a null byte is reached (representing the end).  they are fast
and light, but subject to risks.

.B what the hell (?).  
i am tackling the problem for two reasons.  one, to learn about maintaining
fundamental libraries.  two, because i reuse some string manipulations which
i would like to maintain once.

.B situation (S).  

.B complication (C).  

.B problem (P).  

.B my solution (M).  

.B target user (T).  
very technical, well-versed, power user.

.B accepted functionality (a).  

.B rejected functionality (r).  

.B as always, all my applications must (#).  
   -- run on any linux box from raspberry to cray
   -- stay focused, small, tight, reliable, and secure
   -- forgo sloppy, kitchen-sink languages, like python, java, or perl
   -- stay away from dependency on external code libraries, like boost
   -- only human-readable, 7-bit safe, ascii streams (not database)
   -- have dedicated, maintained, automated unit testing
   -- provide either detailed reporting or logging for debugging
   -- use secure communications between systems where required
   -- clean, clean code so i can maintain after long absences
   -- no international, multi-lang, multi-byte support (freaking ever)
   -- one-hundred percent keyboard driven and centric
   -- operate using modes and windows/panels like vi/vim
   -- follow the yVIKEYS standard to the letter
   -- all tables must be self describing with labels and queries
   -- all data structures must include dumps, reports, and audits
